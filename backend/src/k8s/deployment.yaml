apiVersion: v1
kind: PersistentVolume
metadata:
  name: fastapi-pv
  namespace: myapp
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/c/Users/angel/Desktop/ai/eu/backend/src/fastapi-data  # Make sure this path exists on your actual host!
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fastapi-app-pvc
  namespace: myapp
spec:
  volumeName: fastapi-pv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: myapp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-postgres-pvc
  namespace: myapp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-app
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fastapi-app
  template:
    metadata:
      labels:
        app: fastapi-app
    spec:
      containers:
        - name: fastapi-app
          image: aggeloskyriakoulis/fastapi-app:latest
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef:
                name: app-secrets
          volumeMounts:
            - name: fastapi-app-pvc
              mountPath: /data
      volumes:
        - name: fastapi-app-pvc
          persistentVolumeClaim:
            claimName: fastapi-app-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: db
          image: ankane/pgvector:latest
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: app-secrets
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            exec:
              command:
              - pg_isready
              - -U
              - postgres
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: postgres-pvc


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logs-db
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logs-db
  template:
    metadata:
      labels:
        app: logs-db
    spec:
      containers:
        - name: logs-db
          image: postgres:15
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: app-secrets
          volumeMounts:
            - name: logsdata
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            exec:
              command:
              - pg_isready
              - -U
              - postgres
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: logsdata
          persistentVolumeClaim:
            claimName: logs-postgres-pvc
